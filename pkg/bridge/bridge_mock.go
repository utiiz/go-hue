// Code generated by MockGen. DO NOT EDIT.
// Source: bridge.go

// Package mock_bridge is a generated GoMock package.
package bridge

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	user "github.com/utiiz/go-hue/pkg/user"
)

// MockIBridge is a mock of IBridge interface.
type MockIBridge struct {
	ctrl     *gomock.Controller
	recorder *MockIBridgeMockRecorder
}

// MockIBridgeMockRecorder is the mock recorder for MockIBridge.
type MockIBridgeMockRecorder struct {
	mock *MockIBridge
}

// NewMockIBridge creates a new mock instance.
func NewMockIBridge(ctrl *gomock.Controller) *MockIBridge {
	mock := &MockIBridge{ctrl: ctrl}
	mock.recorder = &MockIBridgeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBridge) EXPECT() *MockIBridgeMockRecorder {
	return m.recorder
}

// GetLights mocks base method.
func (m *MockIBridge) GetLights(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetLights", id)
}

// GetLights indicates an expected call of GetLights.
func (mr *MockIBridgeMockRecorder) GetLights(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLights", reflect.TypeOf((*MockIBridge)(nil).GetLights), id)
}

// GetUser mocks base method.
func (m *MockIBridge) GetUser() (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser")
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIBridgeMockRecorder) GetUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIBridge)(nil).GetUser))
}

// SetUser mocks base method.
func (m *MockIBridge) SetUser(user *user.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUser", user)
}

// SetUser indicates an expected call of SetUser.
func (mr *MockIBridgeMockRecorder) SetUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockIBridge)(nil).SetUser), user)
}

// String mocks base method.
func (m *MockIBridge) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockIBridgeMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockIBridge)(nil).String))
}

// URL mocks base method.
func (m *MockIBridge) URL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URL")
	ret0, _ := ret[0].(string)
	return ret0
}

// URL indicates an expected call of URL.
func (mr *MockIBridgeMockRecorder) URL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URL", reflect.TypeOf((*MockIBridge)(nil).URL))
}
